// <auto-generated />
using Investing.Infrastructure.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Investing.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240614120645_initial-investing-database")]
    partial class initialinvestingdatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Investing.Infrastructure.Entities.Asset", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("AssetClassId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<double>("Percentage")
                        .HasColumnType("double");

                    b.Property<string>("SectorId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("SectorId");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("Investing.Infrastructure.Entities.AssetClass", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AssetClass");
                });

            modelBuilder.Entity("Investing.Infrastructure.Entities.Sector", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("AssetClassId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("Investing.Infrastructure.Entities.SectorConfiguration", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("AssetClassId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<double>("Percentage")
                        .HasColumnType("double");

                    b.Property<string>("SectorId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("SectorId");

                    b.ToTable("SectorConfiguration");
                });

            modelBuilder.Entity("Investing.Infrastructure.Entities.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("AssetClassId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<double>("Percentage")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassId");

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("Investing.Infrastructure.Entities.Asset", b =>
                {
                    b.HasOne("Investing.Infrastructure.Entities.AssetClass", "AssetClassIdNavigation")
                        .WithMany()
                        .HasForeignKey("AssetClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Investing.Infrastructure.Entities.Sector", "SectorIdNavigation")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetClassIdNavigation");

                    b.Navigation("SectorIdNavigation");
                });

            modelBuilder.Entity("Investing.Infrastructure.Entities.Sector", b =>
                {
                    b.HasOne("Investing.Infrastructure.Entities.AssetClass", "AssetClassIdNavigation")
                        .WithMany()
                        .HasForeignKey("AssetClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetClassIdNavigation");
                });

            modelBuilder.Entity("Investing.Infrastructure.Entities.SectorConfiguration", b =>
                {
                    b.HasOne("Investing.Infrastructure.Entities.AssetClass", "AssetClassIdNavigation")
                        .WithMany()
                        .HasForeignKey("AssetClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Investing.Infrastructure.Entities.Sector", "SectorIdNavigation")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetClassIdNavigation");

                    b.Navigation("SectorIdNavigation");
                });

            modelBuilder.Entity("Investing.Infrastructure.Entities.Wallet", b =>
                {
                    b.HasOne("Investing.Infrastructure.Entities.AssetClass", "AssetClassIdNavigation")
                        .WithMany()
                        .HasForeignKey("AssetClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetClassIdNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
