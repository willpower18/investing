@page "/wallet"
@using Investing.WebApp.Models
@using Investing.WebApp.Components
@inject IDialogService Dialog

<MudGrid>
    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Carteira</MudText>
                </CardHeaderContent>
                <CardHeaderActions>                    
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="6">                        
                        @foreach (var item in WalletPercentages)
                        {
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudSelect T="int" Label="Classe de Ativos" SelectedValuesChanged="() => ValidateSelectedAssetClass(item.Line, item.AssetClassId)" Placeholder="Selecione uma classe de ativos" @bind-Value="@item.AssetClassId" AnchorOrigin="Origin.BottomCenter">
                                        @foreach(var assetClass in AssetClasses)
                                        {
                                            <MudSelectItem Value="@(assetClass.Key)">@(assetClass.Value)</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="5">
                                    <MudSlider @onchange="() => AddValueToPieChart(item.Percentage, item.Line)" @bind-Value="@item.Percentage" Max="100">Percentual: @item.Percentage.ToString("#0.00")%</MudSlider>
                                    <MudHidden ></MudHidden>
                                </MudItem>
                                <MudItem xs="1" Class="d-flex align-center justify-center mud-width-full py-8">
                                    <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Error" OnClick="() => RemoveItemFromList(item.Line)"></MudIconButton>
                                </MudItem>
                            </MudGrid>
                            <MudDivider Style="margin-top:20px; margin-bottom:10px;"></MudDivider>
                        }
                        
                        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AddItemToList"></MudIconButton>
                    </MudItem>
                    <MudItem xs="6">
                        <MudChart ChartType="ChartType.Pie"  InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels" Width="300px" Height="300px" />
                    </MudItem>
                </MudGrid>
                <MudButton Color="Color.Success">Salvar</MudButton>
            </MudCardContent>
            <MudCardActions>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private List<WalletPercentage> WalletPercentages = new();
    private List<KeyValuePair<int, string>> AssetClasses = new();
    int contador = 0;
    double value = 50.0;
    double MaxValue = 100;
    double AlreadyAdded = 0;
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 0;
    double[] data;
    string[] labels;

    DialogOptions dialogOptions = new DialogOptions
    {
            FullWidth = true,
            MaxWidth = MaxWidth.ExtraSmall,
            CloseButton = false,
            DisableBackdropClick = true,
            NoHeader = false,
            Position = DialogPosition.TopCenter,
            CloseOnEscapeKey = false
    };

    protected override async Task OnInitializedAsync()
    {
        WalletPercentages = new List<WalletPercentage>();
        CreateOptionsList();
        data = new double[0];
        labels = new string[0];
    }

    private void CreateOptionsList()
    {
        AssetClasses = new();
        AssetClasses.Add(new KeyValuePair<int, string>(1, "Ações"));
        AssetClasses.Add(new KeyValuePair<int, string>(2, "Investimentos Internacionais"));
        AssetClasses.Add(new KeyValuePair<int, string>(3, "Fundos Imboliários"));
        AssetClasses.Add(new KeyValuePair<int, string>(4, "Renda Fixa"));
    }

    private void AddItemToList()
    {   
        if (AlreadyAdded >= 100)
        {
            OpenNewAssetClassValidationMessageModal();
            return;
        }

        WalletPercentages.Add(new(){ AssetClassId = 0, Line = contador, Name = string.Empty, Percentage = 0 });
        contador++;
    }

    private void RemoveItemFromList(int linha)
    {
        var percentage = WalletPercentages.Where(p => p.Line == linha).FirstOrDefault();
        if(percentage != null)
        {
            var assetClassName = AssetClasses.Where(a => a.Key == percentage.AssetClassId).FirstOrDefault();
            if (labels.Where(l => l == assetClassName.Value).Any())
            {
                var labelsToGetIndex = labels.ToList();
                var index = labelsToGetIndex.IndexOf(assetClassName.Value);
                if (index != -1)
                {
                    data[index] = 0;
                    labels[index] = string.Empty;

                    data = data.Where(d => d > 0).ToArray();
                    labels = labels.Where(l => !string.IsNullOrEmpty(l)).ToArray();
                }
            }

            AlreadyAdded = AlreadyAdded - percentage.Percentage;
            WalletPercentages.Remove(percentage);            
        }
    }

    private void ValidateSelectedAssetClass(int line, int id)
    {
        if (WalletPercentages.Where(w => w.AssetClassId == id && w.Line != line).Any())
        {
            var percToUpdate = WalletPercentages.Where(w => w.Line == line).FirstOrDefault();
            if(percToUpdate != null)
            {
                percToUpdate.AssetClassId = 0;
                percToUpdate.Name = string.Empty;
                percToUpdate.Percentage = 0;
            }

            var assetClass = AssetClasses.Where(a => a.Key == id).FirstOrDefault();
            OpenDuplicatedAssetClassValidationMessageModal(assetClass.Value);            
        }        
    }

    private void AddValueToPieChart(double sliderValue, int linha)
    {
        AlreadyAdded = WalletPercentages.Sum(p => p.Percentage);

        double leftValue = MaxValue - (AlreadyAdded - sliderValue);
        if (sliderValue > leftValue)
        {
            OpenTotalValueValidationMessageModal(sliderValue);
            ClearSliderValue(linha);
            return;
        }        

        if(AlreadyAdded >= 100)
        {
            double valorJaAdicionado = WalletPercentages.Sum(p => p.Percentage) - sliderValue;
            double valorTotalComNovoValor = valorJaAdicionado + sliderValue;
            if (valorTotalComNovoValor > 100)
            {
                OpenValidationMessageModal(sliderValue);
                ClearSliderValue(linha);
                return;
            }            
        }       

        var percentage = WalletPercentages.Where(w => w.Line == linha).FirstOrDefault();
        string assetClassName = string.Empty;
        if (percentage != null)
        {
            if(percentage.AssetClassId == 0)
            {
                RequiredAssetClassSelecionValidationMessageModal();
                percentage.Percentage = 0;
                return;    
            }

            var assetClass = AssetClasses.Where(a => a.Key == percentage.AssetClassId).FirstOrDefault();
            assetClassName = assetClass.Value;
            percentage.Name = assetClass.Value;
        }

        if(data.Length <= 0)
        {
            data = new double[1];
            labels = new string[1];
            data[linha] = sliderValue;
            labels[linha] = assetClassName;
        }
        else
        {
            if(labels.Where(l => l == assetClassName).Any())
            {
                var labelsToGetIndex = labels.ToList();
                var index = labelsToGetIndex.IndexOf(assetClassName);
                if(index != -1)
                {
                    data[index] = sliderValue;
                }

                return;
            }

            int newLength = data.Length + 1;
            var oldData = data.ToArray();
            var oldLabels = labels.ToArray();

            data = new double[newLength];
            labels = new string[newLength];

            int counter = 0;
            for(counter = 0; counter < oldData.Length; counter++)
            {
                data[counter] = oldData[counter];
                labels[counter] = oldLabels[counter];
            }                        

            if (linha > newLength - 1)
            {
                data[counter] = sliderValue;
                labels[counter] = assetClassName;
            }
            else
            {
                data[linha] = sliderValue;
                labels[linha] = assetClassName;
            }
        }

        dataSize++;       
    }

    private void ClearSliderValue(int line)
    {
        var percentage = WalletPercentages.Where(p => p.Line == line).FirstOrDefault();
        if (percentage != null)
        {
            percentage.Percentage = 0;
        }
    }

    private void OpenValidationMessageModal(double leftValue)
    {
        var parameters = new DialogParameters();
        parameters.Add("Mensagem", $"Não é possível adicionar {leftValue}%, pois ultrpassa o total de 100%.");
        var dialogResult = Dialog.Show<MessageDialog>("Atenção!", parameters, dialogOptions);
    }

    private void OpenTotalValueValidationMessageModal(double value)
    {
        var parameters = new DialogParameters();        
        double alreadyAdded = AlreadyAdded > 100 ? 100 : AlreadyAdded;
        double leftValue = MaxValue - alreadyAdded;
        parameters.Add("Mensagem", $"Não é possível adicionar {value}%, pois já existem {alreadyAdded}% adicionados, restam somente {leftValue}% para serem adicionados.");
        var dialogResult = Dialog.Show<MessageDialog>("Atenção!", parameters, dialogOptions);
    }

    private void OpenNewAssetClassValidationMessageModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("Mensagem", $"Não é possível adicionar mais uma classe de ativos pois já foram adicionadas 100% outras classes.");
        var dialogResult = Dialog.Show<MessageDialog>("Atenção!", parameters, dialogOptions);
    }

    private void OpenDuplicatedAssetClassValidationMessageModal(string assetClass)
    {
        var parameters = new DialogParameters();
        parameters.Add("Mensagem", $"Não é possível adicionar a classe de ativos {assetClass}, pois a mesma já foi adicionada.");
        var dialogResult = Dialog.Show<MessageDialog>("Atenção!", parameters, dialogOptions);
    }

    private void RequiredAssetClassSelecionValidationMessageModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("Mensagem", $"Antes de informar o percentual, por favor selecione uma classe de ativos.");
        var dialogResult = Dialog.Show<MessageDialog>("Atenção!", parameters, dialogOptions);
    }
}
