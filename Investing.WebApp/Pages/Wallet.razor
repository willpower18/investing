@page "/wallet"
@using Investing.WebApp.Models

<MudGrid>
    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Carteira</MudText>
                </CardHeaderContent>
                <CardHeaderActions>                    
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="6">                        
                        @foreach (var item in WalletPercentages)
                        {
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudSelect T="int" Label="Classe de Ativos" Placeholder="Selecione uma classe de ativos" @bind-Value="@item.AssetClassId" AnchorOrigin="Origin.BottomCenter">
                                        @foreach(var assetClass in AssetClasses)
                                        {
                                            <MudSelectItem Value="@(assetClass.Key)">@(assetClass.Value)</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="5">
                                    <MudSlider @onchange="() => PopularGraficoPizza(item.Percentage, item.Line)" @bind-Value="@item.Percentage">Percentual: @item.Percentage.ToString("#0.00")%</MudSlider>
                                </MudItem>
                                <MudItem xs="1" Class="d-flex align-center justify-center mud-width-full py-8">
                                    <MudIconButton Icon="@Icons.Material.Filled.Remove" Color="Color.Error" OnClick="() => RemoverItemDaLista(item.Line)"></MudIconButton>
                                </MudItem>
                            </MudGrid>
                            <MudDivider Style="margin-top:20px; margin-bottom:10px;"></MudDivider>
                        }
                        
                        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="AdicionarItemALista"></MudIconButton>
                    </MudItem>
                    <MudItem xs="6">
                        <MudChart ChartType="ChartType.Pie"  InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels" Width="300px" Height="300px" />
                    </MudItem>
                </MudGrid>
                <MudButton Color="Color.Success">Salvar</MudButton>
            </MudCardContent>
            <MudCardActions>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private List<WalletPercentage> WalletPercentages = new();
    private List<KeyValuePair<int, string>> AssetClasses = new();
    int contador = 0;
    double value = 50.0;
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 0;
    double[] data;
    string[] labels;


    protected override async Task OnInitializedAsync()
    {
        WalletPercentages = new List<WalletPercentage>();
        PopularListaDeOpcoes();
        data = new double[0];
        labels = new string[0];
    }

    private void PopularListaDeOpcoes()
    {
        AssetClasses = new();
        AssetClasses.Add(new KeyValuePair<int, string>(1, "Ações"));
        AssetClasses.Add(new KeyValuePair<int, string>(2, "Investimentos Internacionais"));
        AssetClasses.Add(new KeyValuePair<int, string>(3, "Fundos Imboliários"));
        AssetClasses.Add(new KeyValuePair<int, string>(4, "Renda Fixa"));
    }

    private void AdicionarItemALista()
    {        
        WalletPercentages.Add(new(){ AssetClassId = 0, Line = contador, Name = string.Empty, Percentage = 0 });
        contador++;
    }

    private void RemoverItemDaLista(int linha)
    {
        
    }

    private void SelecionarClasseAtivo( int linha, int id)
    {
        var percentage = WalletPercentages.Where(w => w.Line == linha).FirstOrDefault();
        if(percentage != null)
        {
            var assetClass = AssetClasses.Where(a => a.Key == id).FirstOrDefault();
            percentage.AssetClassId = assetClass.Key;
        }
    }

    private void PopularGraficoPizza(double sliderValue, int linha)
    {
        var percentage = WalletPercentages.Where(w => w.Line == linha).FirstOrDefault();
        string assetClassName = string.Empty;
        if (percentage != null)
        {
            var assetClass = AssetClasses.Where(a => a.Key == percentage.AssetClassId).FirstOrDefault();
            assetClassName = assetClass.Value;
            percentage.Name = assetClass.Value;
        }

        if(data.Length <= 0)
        {
            data = new double[1];
            labels = new string[1];
            data[linha] = sliderValue;
            labels[linha] = assetClassName;
        }
        else
        {
            int newLength = data.Length + 1;
            var oldData = data.ToArray();
            var oldLabels = labels.ToArray();

            data = new double[newLength];
            labels = new string[newLength];

            for(int counter = 0; counter < oldData.Length; counter++)
            {
                data[counter] = oldData[counter];
                labels[counter] = oldLabels[counter];
            }                        

            data[linha] = sliderValue;
            labels[linha] = assetClassName;
        }

        dataSize++;       
    }
}
